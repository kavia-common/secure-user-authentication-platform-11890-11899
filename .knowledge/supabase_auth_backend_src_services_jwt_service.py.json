{"is_source_file": true, "format": "Python", "description": "This file defines the JWTService class which provides methods for creating, verifying, refreshing, and retrieving information from JSON Web Tokens (JWTs) for authentication purposes within the project.", "external_files": ["src/config/settings"], "external_methods": ["jwt.encode", "jwt.decode"], "published": ["jwt_service"], "classes": [{"name": "JWTService", "description": "Service for handling JWT token operations such as creation, verification, and refreshment."}], "methods": [{"name": "str create_access_token(self, data: Dict[str, Any], expires_delta: Optional[timedelta] = None)", "description": "Creates a JWT token with the provided data and optional expiration delta.", "scope": "JWTService", "scopeKind": "class"}, {"name": "Optional[Dict[str,Any]] verify_token(self, token: str)", "description": "Verifies and decodes the provided JWT token, returning the payload if valid.", "scope": "JWTService", "scopeKind": "class"}, {"name": "Optional[datetime] get_token_expiry(self, token: str)", "description": "Extracts the expiration datetime from a valid token.", "scope": "JWTService", "scopeKind": "class"}, {"name": "bool is_token_expired(self, token: str)", "description": "Checks whether a token has expired based on its 'exp' claim.", "scope": "JWTService", "scopeKind": "class"}, {"name": "Optional[str] refresh_token_if_needed(self, token: str, refresh_threshold_minutes: int = 5)", "description": "Refreshes the token if it is close to expiry, within the specified threshold.", "scope": "JWTService", "scopeKind": "class"}, {"name": "__init__(self)", "scope": "JWTService", "scopeKind": "class", "description": "unavailable"}], "calls": ["jwt.encode", "jwt.decode"], "search-terms": ["JWTService", "create_access_token", "verify_token", "refresh_token", "jwt_secret_key", "jwt_algorithm", "jwt_service"], "state": 2, "file_id": 10, "knowledge_revision": 21, "git_revision": "", "ctags": [{"_type": "tag", "name": "JWTService", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/jwt_service.py", "pattern": "/^class JWTService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/jwt_service.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "JWTService", "scopeKind": "class"}, {"_type": "tag", "name": "create_access_token", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/jwt_service.py", "pattern": "/^    def create_access_token(self, data: Dict[str, Any], expires_delta: Optional[timedelta] = Non/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, data: Dict[str, Any], expires_delta: Optional[timedelta] = None)", "scope": "JWTService", "scopeKind": "class"}, {"_type": "tag", "name": "get_token_expiry", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/jwt_service.py", "pattern": "/^    def get_token_expiry(self, token: str) -> Optional[datetime]:$/", "language": "Python", "typeref": "typename:Optional[datetime]", "kind": "member", "signature": "(self, token: str)", "scope": "JWTService", "scopeKind": "class"}, {"_type": "tag", "name": "is_token_expired", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/jwt_service.py", "pattern": "/^    def is_token_expired(self, token: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, token: str)", "scope": "JWTService", "scopeKind": "class"}, {"_type": "tag", "name": "jwt_service", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/jwt_service.py", "pattern": "/^jwt_service = JWTService()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/jwt_service.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "refresh_token_if_needed", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/jwt_service.py", "pattern": "/^    def refresh_token_if_needed(self, token: str, refresh_threshold_minutes: int = 5) -> Optiona/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "member", "signature": "(self, token: str, refresh_threshold_minutes: int = 5)", "scope": "JWTService", "scopeKind": "class"}, {"_type": "tag", "name": "verify_token", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/jwt_service.py", "pattern": "/^    def verify_token(self, token: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, token: str)", "scope": "JWTService", "scopeKind": "class"}], "hash": "e7cdb349c1a80b0daa0e2b31deacf95a", "format-version": 4, "code-base-name": "supabase_auth_backend", "filename": "supabase_auth_backend/src/services/jwt_service.py", "fields": [{"name": "jwt_service = JWTService()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"21": ""}]}