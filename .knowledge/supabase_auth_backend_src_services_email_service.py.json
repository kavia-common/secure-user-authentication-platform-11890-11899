{"is_source_file": true, "format": "Python", "description": "This file defines an EmailService class responsible for handling email operations such as sending OTP emails, verification, and welcome emails. It manages SMTP configuration, OTP generation and storage, and email composition and sending.", "external_files": ["src.config.settings"], "external_methods": ["settings.email_smtp_host", "settings.email_smtp_port", "settings.email_smtp_user", "settings.email_smtp_password", "settings.email_from", "settings.site_url"], "published": ["email_service"], "classes": [{"name": "EmailService", "description": "Service for handling email operations including OTP sending, verification, and welcome emails."}], "methods": [{"name": "str generate_otp(self, length: int = 6)", "description": "Generates a random numeric OTP code of specified length.", "scope": "EmailService", "scopeKind": "class"}, {"name": "tuple[bool,str] send_otp_email(self, email: str, purpose: str = \"2fa\")", "description": "Asynchronously generates and sends an OTP email for 2FA or verification purposes, and stores the OTP temporarily.", "scope": "EmailService", "scopeKind": "class"}, {"name": "bool verify_otp(self, email: str, otp_code: str, purpose: str = \"2fa\")", "description": "Verifies the provided OTP code against stored data, checking expiration and attempt limits.", "scope": "EmailService", "scopeKind": "class"}, {"name": "bool send_welcome_email(self, email: str, first_name: str)", "description": "Asynchronously sends a welcome email to new users.", "scope": "EmailService", "scopeKind": "class"}, {"name": "bool _send_email(self, to_email: str, subject: str, body: str)", "description": "Handles the actual SMTP email sending process.", "scope": "EmailService", "scopeKind": "class"}, {"name": "__init__(self)", "scope": "EmailService", "scopeKind": "class", "description": "unavailable"}], "calls": ["self._send_email", "smtplib.SMTP", "logger.info", "logger.error", "logger.warning", "datetime.utcnow", "random.choices", "string.digits"], "search-terms": ["OTP generation", "email verification", "SMTP email sending", "OTP storage in memory", "async email methods", "welcome email", "2fa email", "verification email"], "state": 2, "file_id": 11, "knowledge_revision": 66, "git_revision": "6ad20ab69f3fbc943e47aacf4d49fc9b4afde8e7", "revision_history": [{"23": ""}, {"49": ""}, {"65": "6ad20ab69f3fbc943e47aacf4d49fc9b4afde8e7"}, {"66": "6ad20ab69f3fbc943e47aacf4d49fc9b4afde8e7"}], "ctags": [{"_type": "tag", "name": "EmailService", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/email_service.py", "pattern": "/^class EmailService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/email_service.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "EmailService", "scopeKind": "class"}, {"_type": "tag", "name": "_send_email", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/email_service.py", "pattern": "/^    async def _send_email(self, to_email: str, subject: str, body: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, to_email: str, subject: str, body: str)", "scope": "EmailService", "scopeKind": "class"}, {"_type": "tag", "name": "email_service", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/email_service.py", "pattern": "/^email_service = EmailService()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "generate_otp", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/email_service.py", "pattern": "/^    def generate_otp(self, length: int = 6) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, length: int = 6)", "scope": "EmailService", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/email_service.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "send_otp_email", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/email_service.py", "pattern": "/^    async def send_otp_email(self, email: str, purpose: str = \"2fa\") -> tuple[bool, str]:$/", "language": "Python", "typeref": "typename:tuple[bool,str]", "kind": "member", "signature": "(self, email: str, purpose: str = \"2fa\")", "scope": "EmailService", "scopeKind": "class"}, {"_type": "tag", "name": "send_welcome_email", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/email_service.py", "pattern": "/^    async def send_welcome_email(self, email: str, first_name: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, email: str, first_name: str)", "scope": "EmailService", "scopeKind": "class"}, {"_type": "tag", "name": "verify_otp", "path": "/home/kavia/workspace/code-generation/secure-user-authentication-platform-11890-11899/supabase_auth_backend/src/services/email_service.py", "pattern": "/^    def verify_otp(self, email: str, otp_code: str, purpose: str = \"2fa\") -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, email: str, otp_code: str, purpose: str = \"2fa\")", "scope": "EmailService", "scopeKind": "class"}], "hash": "5d737d49e3f9a16f8731da0e9dcbd1fa", "format-version": 4, "code-base-name": "supabase_auth_backend", "filename": "supabase_auth_backend/src/services/email_service.py", "fields": [{"name": "email_service = EmailService()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}